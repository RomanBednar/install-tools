ARG GOLANG_VERSION=1.22.6
FROM --platform=linux/x86_64 golang:$GOLANG_VERSION AS build

COPY . /app
WORKDIR /app/api
RUN go build -o backend

FROM --platform=linux/x86_64 docker:latest

ARG GOLANG_VERSION
ENV GOLANG_VERSION=${GOLANG_VERSION}
ENV OC_CLI_URL=https://mirror.openshift.com/pub/openshift-v4/x86_64/clients/ocp/latest/openshift-client-linux-arm64.tar.gz
ENV GOLANG_TARFILE=go$GOLANG_VERSION.linux-amd64.tar.gz
ENV GOLANG_TARFILE_URL=https://go.dev/dl/$GOLANG_TARFILE

# add the vcenter certificates to the system
# to copy this manually into container for testing:  ls ./artifacts/linux-ca-vcenter/* | xargs -I {} podman cp {} <container_id>:/usr/local/share/ca-certificates/
COPY artifacts/linux-ca-vcenter/* /usr/local/share/ca-certificates/

# libc6-compat is needed on alipine for ccoctl binary to load dynamic libraries correctly
# bash is needed for gcloud installation and runtime to work
RUN apk update && \
    apk upgrade --available && \
    apk add curl bash python3 gcc bash musl-dev openssl-dev ca-certificates podman fuse-overlayfs libc6-compat && \
    update-ca-certificates && \
    wget ${OC_CLI_URL} -O /tmp/oc.tar.gz && \
    tar xvzf /tmp/oc.tar.gz --directory /bin

# download and install gcloud cli
RUN curl https://sdk.cloud.google.com > /tmp/install.sh && \
    bash /tmp/install.sh --disable-prompts --install-dir=/usr/local/bin && \
    export PATH=$PATH:/usr/local/bin/google-cloud-sdk/bin && \
    gcloud version

# download and install go
RUN wget $GOLANG_TARFILE_URL && \
    tar -C /usr/local -xzf $GOLANG_TARFILE && \
    export PATH=$PATH:/usr/local/go/bin && \
    rm $GOLANG_TARFILE && \
    go version

ENV PATH=$PATH:/usr/local/go/bin

#########################
COPY --from=build /app /app
WORKDIR /app/api
EXPOSE 8080
CMD ["./backend"]
